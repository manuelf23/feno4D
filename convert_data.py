# coding=utf-8
import struct
from textwrap import wrap
import numpy as np
DISTANCE_RESOLUTION = 0.002
LASER_ANGLES = [-15, 1, -13, 3, -11, 5, -9, 7, -7, 9, -5, 11, -3, 13, -1, 15]

def azimuth(data_bytes):
    '''
    data_bytes: lista de tamaño 2 con los data_bytes invertidos
    '''
    if isinstance(data_bytes, list) and len(data_bytes) == 2:
        return int("".join(data_bytes[::-1]), 16)  # el valor es retornado por 100 / 24534º=245.34º el mas 1 es para que coincida con Veloview
    else:
        return None
def interpolacion_azimuth(prev_azimuth, azimuth_val):
    if azimuth_val < prev_azimuth:
        azimuth_val += 36000  # 36000 porque los ángulos vienen multiplicados por 100
    interpol_azimuth_val = prev_azimuth + ((azimuth_val - prev_azimuth)/2)
    if interpol_azimuth_val > 36000:
        interpol_azimuth_val -= 36000
    return round(interpol_azimuth_val)  # el mas 1 es para que coincida con Veloview

def dataPoint(data_bytes):
    if isinstance(data_bytes, list) and len(data_bytes) == 3:
        # a="".join(data_bytes[0:2][::-1])
        # print(a)
        return int("".join(data_bytes[0:2][::-1]), 16), int(data_bytes[2], 16)  
    else:
        return None

def timeStamp(data_bytes):
    if isinstance(data_bytes, list) and len(data_bytes) == 4:
        return int("".join(data_bytes[::-1]), 16) /1000000 # se divide en 1000000 para pasar us a s 
    else:
        return None

def calc_xyz(dis, azimuth, laser_id):
    R = (dis) * DISTANCE_RESOLUTION
    omega = LASER_ANGLES[laser_id] * np.pi / 180.0
    alpha = azimuth / 100.0 * np.pi / 180.0
    X = R * np.cos(omega) * np.sin(alpha)
    Y = R * np.cos(omega) * np.cos(alpha)
    Z = R * np.sin(omega)
    return [X, Y, Z]

# data = b'\xff\xee\xe9\x13\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x17\x00\x00>\x00\x00:\xff\xee\x12\x14\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x1c\x00\x00>\x00\x00:\xff\xee9\x14\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xeea\x14\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x00*\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xee\x89\x14\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x1c\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xee\xaf\x14\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x1c\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x00*\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xee\xd8\x14\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x00*\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xee\xff\x14\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x1c\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x00*\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xee(\x15\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x1c\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xeeP\x15\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x001\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x1c\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xeex\x15\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x17\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:\xff\xee\x9e\x15\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x008\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00\x1c\x00\x00>\x00\x00:\x00\x00\t\x00\x00M\x00\x00\r\x00\x005\x00\x00\t\x00\x005\x00\x00*\x00\x00$\x00\x00+\x00\x00<\x00\x00#\x00\x00\x16\x00\x00+\x00\x00"\x00\x00>\x00\x00:y\x94\xc1\x1a7"'
# header_index = [0, 42]
# dataLen = 100
# hexarray = data.hex().split('ffee')

# for n in range(1,13,1):
#     print('-'*20)
#     ch5 = wrap(hexarray[n], 2)
#     az = azimuth(ch5[0:2])
#     # print('azimuth:', az)
#     for i in range(32):
#         # print([2 + (i*3), 5 + (i*3)], ch5[2 + (i*3):5 + (i*3)])
#         dataP = dataPoint(ch5[2 + (i*3):5 + (i*3)])
#         print(dataP[0], 'mm', 'reflectivity:', dataP[1])

#     if n == 12:
#         print('timeStamp:',timeStamp(ch5[98:102]))



